plugins {
	id 'java'
	id 'com.vaadin' version '24.5.8'
	id 'org.cyclonedx.bom' version '1.10.0'
	id 'com.gorylenko.gradle-git-properties' version '2.4.2'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.eclipse.jkube.kubernetes' version '1.17.0'
}

group = 'org.cftoolsuite'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
	maven { url 'https://maven.vaadin.com/vaadin-addons/' }
}

ext {
	set('springCloudVersion', "2024.0.0")
	set('vaadinVersion', "24.5.8")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.apache.commons:commons-collections4:4.4'
	implementation 'io.github.openfeign:feign-hc5:13.5'
	implementation 'com.vaadin:vaadin-spring-boot-starter'
	implementation 'org.vaadin.olli:file-download-wrapper:7.1.0'
	implementation 'org.commonmark:commonmark:0.24.0'
	implementation 'org.apache.commons:commons-lang3'
	implementation 'io.pivotal.cfenv:java-cfenv-all:3.3.0'
	implementation 'org.springframework.cloud:spring-cloud-bindings:2.0.4'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "com.vaadin:vaadin-bom:${vaadinVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

bootRun {
    systemProperties System.properties
}

tasks.named('bootBuildImage') {
	imageName = "docker.io/${project.group.contains('.') ? project.group.tokenize('.').last() : project.group}/${project.name}:${project.version}"
	tags = [ "docker.io/${project.group.contains('.') ? project.group.tokenize('.').last() : project.group}/${project.name}:latest" ]
}

kubernetes {
	buildStrategy = 'buildpacks'
    generator {
        config {
            'spring-boot' {
                color = 'always'
            }
        }
    }
    helm {
        maintainers = [{
            name = 'Chris Phillipson'
        }]
    }
}

task setVersion {
    doLast {
        def newVersion = project.hasProperty('newVersion') ? project.newVersion : version
        ant.propertyfile(file: "gradle.properties") {
            entry(key: "version", value: newVersion)
        }
    }
}

task printArtifactPath {
    doLast {
        println bootJar.archiveFile.get().asFile.absolutePath
    }
}
